#! /usr/bin/env php

<?php
/**
 * PSR-4 Package initialization script.
 *
 * @author Achmad F. Ibrahim <acfatah@gmail.com>
 * @version 0.1.0
 * @package acfatah/psr4-package
 */

print <<<EOD
PSR-4 Package initialization script. Version 1.0.0-dev\n

This script will replace all the metadata keywords with the input value.
Metadata keywords are:

 {{PROJECT_NAME}}, {{VENDOR_PACKAGE}}, {{DESCRIPTION}}, {{KEYWORDS}},
 {{AUTHOR}}, {{EMAIL}}, {{HOMEPAGE}}, {{AUTOLOAD-PSR4}}, {{NAMESPACE}},
 {{COPYRIGHT}}, {{DATE}}


EOD;
print 'Press [ENTER] to continue or type "q" to quit: ';

$handle = fopen('php://stdin', 'r');
$input = strtolower(trim(fgets($handle)));
strpos($input, 'q') === false or exit(1);
print PHP_EOL;

ini_set('memory_limit', '512M');

define('SOURCE_PATH', realpath(__DIR__ . '/..'));

$metadata = [
    // 'keywords' => [ 'description', 'default']
    '{{PROJECT_NAME}}' => [
        '[REQUIRED] Project name. E.g, "Foo Project".',
        ''
    ],
    '{{VENDOR_PACKAGE}}' => [
        '[REQUIRED] Composer package name string. E.g, "acfatah/package".',
        ''
    ],
    '{{DESCRIPTION}}' => [
        'Project short description.', ''
    ],
    '{{KEYWORDS}}' => [
"Composer comma separated package keywords quoted with (\"). E.g, \n" .
'"psr-4", "library", "composer package"',
        ''
    ],
    '{{AUTHOR}}' => [
        'Author.',
        'Achmad F. Ibrahim'
    ],
    '{{EMAIL}}' => [
        'Email.',
        'acfatah@gmail.com'
    ],
    '{{HOMEPAGE}}' => [
        'Project homepage.',
        'http://github.com/acfatah'
    ],
    '{{NAMESPACE}}' => [
        'Project namespace. E.g "Acfatah\Package"',
        ''
    ],
    '{{AUTOLOAD-PSR4}}' => [
        'PSR-4 composer autoload string. E.g "Acfatah\\\\Package\\\\"',
        ''
    ],
    '{{COPYRIGHT}}' => [
        'Copyright holder.',
        'Achmad F. Ibrahim'
    ],
    '{{DATE}}' => [
        'Project date (Y-m-d).',
        date('Y-m-d')
    ]
];

// input value for each metadata
$search = []; $replace = [];
foreach ($metadata as $meta => $value) {
    print $value[0] . " [{$value[1]}]:\n";
    $search[] = $meta;
    $input = trim(fgets($handle));
    
    if (empty($input) && false !== strpos($value[0], '[REQUIRED]')) {
        print " ERROR! Required input cannot be empty.\n";
        exit(1);
    }
    
    $replace[] = $input? $input: $value[1];
}


// iterate all folders and replace metadata
$recursive = new RecursiveIteratorIterator(
    new RecursiveDirectoryIterator(
        SOURCE_PATH
    )
);
$modified = [];
foreach ($recursive as $iterator) {

    if ($iterator->isDir()) {
        continue;
    }
    
    $file = $iterator->getRealPath();
    
    if ($file == __FILE__) {
        continue;
    }
    
    $content = file_get_contents($file);
    
    foreach ($metadata as $meta => $value) {
        if (false !== strpos($content, $meta)) {
            $modified[] = str_replace(
                    SOURCE_PATH . DIRECTORY_SEPARATOR,
                    '',
                    $iterator->getFileName()
            );
            $content = str_replace($search, $replace, $content);
            file_put_contents($file, $content);
            break;
        }
    }
}

print PHP_EOL;
print ' Modified ' . count($modified) . ' file(s):' . PHP_EOL;
foreach($modified as $value) {
    print '  - ' . $value . PHP_EOL;
}
print PHP_EOL;

$exitCode = 0;

// remove composer.json file
if (!unlink(SOURCE_PATH . DIRECTORY_SEPARATOR . 'composer.json')) {
    print PHP_EOL;
    print <<<EOD
 Unable to remove "composer.json" file.

 Please remove default "composer.json" and rename "_composer.json" to
 "composer.json" manually.


EOD;
    $exitCode = 1;
}

// rename _composer.json
if (!rename(
    SOURCE_PATH . DIRECTORY_SEPARATOR . '_composer.json', 
    SOURCE_PATH . DIRECTORY_SEPARATOR . 'composer.json')
) {
    print PHP_EOL;
    print <<<EOD
 Unable to rename "_composer.json" file to "composer.json". 
 
 Please rename "_composer.json" file to "composer.json" manually.


EOD;
    $exitCode = 1;
}


// rename netbeans project folder
if (!rename(
    SOURCE_PATH . DIRECTORY_SEPARATOR . '_nbproject', 
    SOURCE_PATH . DIRECTORY_SEPARATOR . 'nbproject')
) {
    print PHP_EOL;
    print <<<EOD
 Unable to rename "_nbproject" directory to "nbproject". 
 
 Please rename "_nbproject" directory to "nbproject" manually.


EOD;
    $exitCode = 1;
}

// remove files
print PHP_EOL;
$junks = [
    __DIR__ . DIRECTORY_SEPARATOR . 'init',
    SOURCE_PATH . DIRECTORY_SEPARATOR . 'src' . DIRECTORY_SEPARATOR . '.gitkeep',
    SOURCE_PATH . DIRECTORY_SEPARATOR . 'tests' . DIRECTORY_SEPARATOR . 'Fixture' 
        . DIRECTORY_SEPARATOR .  '.gitkeep',
    SOURCE_PATH . DIRECTORY_SEPARATOR . 'tests' . DIRECTORY_SEPARATOR . 'unit' 
        . DIRECTORY_SEPARATOR .  '.gitkeep'
];
foreach ($junks as $junk) {
    if (!unlink($junk)) {
        print sprintf(' Unable to remove "%s" file.', $junk) . PHP_EOL;
        $exitCode = 1;
    }
}

exit($exitCode);
